{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","message","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","htmlFor","onClick","toggleMode","defaultProps","aboutText","TextForm","text","setText","useState","Fragment","heading","onChange","event","target","value","style","backgroundColor","color","rows","handleUPCase","newText","toUpperCase","showAlert","handleLOCase","toLowerCase","length","trim","split","App","setMode","setAlert","console","log","document","body","querySelector","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.78b729c7.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n  return (\n        props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\n       {props.alert.message}\n        </div>\n  )\n}\n\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Outlet, Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode==='success'?'dark':props.mode} bg-${props.mode} }`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\"> */}\r\n          {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n        {/* </li> */}\r\n      </ul>\r\n      {/* <Outlet /> */}\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      {/* <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode} Mode</label>\r\n      </div> */}\r\n      <label className={`\"form-check-label bg-light\"`} htmlFor=\"flexSwitchCheckDefault\">Choose Theme</label>\r\n      <div className=\"btn-toolbar mx-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n          <div className=\"btn-group me-2\" role=\"group\" aria-label=\"First group\">\r\n              <button type=\"button\" onClick={() => props.toggleMode(\"light\")} className=\"btn btn-primary  \" >1</button>\r\n              <button type=\"button\" onClick={() => props.toggleMode(\"dark\")} className=\"btn btn-dark\">2</button>\r\n              <button type=\"button\" onClick={() => props.toggleMode(\"warning\")} className=\"btn btn-warning\">3</button>\r\n              <button type=\"button\" onClick={() => props.toggleMode(\"success\")} className=\"btn btn-success\">4</button>              \r\n          </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set Title here\",\r\n    aboutText: \"About\"\r\n}","import React, {useState} from \"react\";\r\n\r\nfunction TextForm(props) {\r\n  const handleUPCase = ()=>{\r\n    let newText = text.toUpperCase(); \r\n    setText(newText)\r\n    props.showAlert(\"Text converted to Uppercase\",\"success\")\r\n  }\r\n\r\n  const handleLOCase = ()=>{\r\n    let newText = text.toLowerCase(); \r\n    setText(newText)\r\n    props.showAlert(\"Text converted to Lowercase\",\"success\")\r\n  }\r\n\r\n  const handleOnChange = (event)=>{\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const [text, setText] = useState(\"\")\r\n  return (\r\n    <>\r\n    <div>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"container my-3\">\r\n        <textarea className=\"form-control\" onChange={handleOnChange} style={{ backgroundColor:  props.mode === 'light' || props.mode === 'success' || props.mode === 'warning'?'white':'#212529', color: props.mode === 'dark'?'white':'black'}} id=\"mybox\" value={text} rows=\"8\"></textarea>\r\n\r\n      </div>\r\n      <button className={`btn btn-${props.mode === 'success'? 'success':props.mode === 'warning'? 'warning':'primary'} mx-2`} onClick={handleUPCase}>Convert to Uppercase</button>\r\n      <button className={`btn btn-${props.mode === 'success'? 'success':props.mode === 'warning'? 'warning':'primary'} mx-2`} onClick={handleLOCase}>Convert to Lowercase</button>\r\n      <button className={`btn btn-${props.mode === 'success'? 'success':props.mode === 'warning'? 'warning':'primary'} mx-2`} onClick={()=>{setText(\"\");props.showAlert(\"Text cleared\", \"success\"); }}>Clear Text</button>\r\n    </div>\r\n\r\n    <div className=\"container my-3\" >\r\n    <h2> Your text Summary</h2>\r\n    <p>{`${text.length ===0?0:text.trim().split(/\\s+/).length} and ${text.length} Characters`}</p>\r\n    <h2> Preview</h2>\r\n    <p>{text.length>0?text:'Enter something in the textbox to get preview here'}</p>\r\n    </div>\r\n    </>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default TextForm;\r\n","import React,{ useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        message: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n  }\n  const toggleMode = (color)=> {\n    if(color === 'light'){\n      setMode('light')\n      document.body.style.backgroundColor = \"white\"\n      document.body.style.color = \"#212529\"\n      document.querySelector('nav').style.color = 'black';\n      // showAlert(\"Light theme\", \"primary\")\n    }\n    else if(color === \"warning\"){\n      setMode(color)  \n      document.body.style.backgroundColor = \"white\"\n      document.body.style.color = \"#212529\"\n      document.querySelector('nav').style.color = 'black';\n      // showAlert(\"Yellow theme\", \"warning\")\n    }\n    else if(color === \"success\"){\n      setMode(color);\n      document.body.style.backgroundColor = \"white\"\n      document.querySelector('nav').style.color = 'white'; \n      // showAlert(\"Green theme\", \"success\")  \n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor = \"#18417d\"\n      document.body.style.color = \"white\"\n      document.querySelector('nav').style.color = 'white';\n      // showAlert(\"Dark theme\", \"dark\")  \n    }\n  }\n  console.log(mode)\n\n  return (\n   <>\n   {/* <BrowserRouter> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className='container my-3'>\n        {/* <Routes> */}\n          {/* <Route path=\"/\" element={<TextForm heading=\"Enter the text below\" showAlert={showAlert}  mode={mode}/>}/> */}\n            {/* <Route index element={<TextForm heading=\"Enter the text below\" showAlert={showAlert}  mode={mode} />} />      */}\n            {/* <Route path=\"/about\" element={<About />} /> */}\n        {/* </Routes> */}\n       <TextForm heading=\"Enter the text below\" showAlert={showAlert}  mode={mode} />\n        \n        {/* </Routes> */}\n    </div>\n   {/* </BrowserRouter> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}